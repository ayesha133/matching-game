

/** Programmer: Ayesha Arshad
 *
 * @author hhhgo
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.Timer;
public class matchinGgame extends javax.swing.JFrame {

    /**
     * Creates new form matchinGgame
     */
    ArrayList <String> cards = new ArrayList(); 
    ArrayList <String> set = new ArrayList(); 
        // Arraylists are used to hold cards and set them at random
  
    ImageIcon a = new ImageIcon("Card1.png");
    ImageIcon b = new ImageIcon("card2.png");
    ImageIcon c = new ImageIcon("card3.png");
    ImageIcon d = new ImageIcon("card4.jpg");
    ImageIcon e = new ImageIcon("card5.png");
    ImageIcon f = new ImageIcon("card6.png");
    ImageIcon g = new ImageIcon("card7.png");
    ImageIcon h = new ImageIcon("card8.png");
    ImageIcon i = new ImageIcon("card9.png");
    ImageIcon back = new ImageIcon("cover1.png");
    ImageIcon done = new ImageIcon("done.png");
        // ImageIcon assigns images to variables
    int count, c1, c2, card1, card2; 
    int cardsLeft = 18; 
    int[] change = new int[18];
    
    
    
    public matchinGgame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Card1 = new javax.swing.JButton();
        Card2 = new javax.swing.JButton();
        Card3 = new javax.swing.JButton();
        Card4 = new javax.swing.JButton();
        Card8 = new javax.swing.JButton();
        Card5 = new javax.swing.JButton();
        Card17 = new javax.swing.JButton();
        Card7 = new javax.swing.JButton();
        Card12 = new javax.swing.JButton();
        Card9 = new javax.swing.JButton();
        Card10 = new javax.swing.JButton();
        Card11 = new javax.swing.JButton();
        Card16 = new javax.swing.JButton();
        Card13 = new javax.swing.JButton();
        Card14 = new javax.swing.JButton();
        Card15 = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        Exitbutton = new javax.swing.JButton();
        Card18 = new javax.swing.JButton();
        Card6 = new javax.swing.JButton();
        congratsTextField1 = new javax.swing.JTextField();
        resetButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Gabriola", 0, 36)); // NOI18N
        jLabel1.setText("Matching Game");

        Card1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card1.setPreferredSize(new java.awt.Dimension(90, 90));
        Card1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card1MouseClicked(evt);
            }
        });

        Card2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card2.setPreferredSize(new java.awt.Dimension(90, 90));
        Card2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card2MouseClicked(evt);
            }
        });

        Card3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card3.setMaximumSize(new java.awt.Dimension(130, 106));
        Card3.setMinimumSize(new java.awt.Dimension(130, 106));
        Card3.setPreferredSize(new java.awt.Dimension(90, 90));
        Card3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card3MouseClicked(evt);
            }
        });

        Card4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card4.setPreferredSize(new java.awt.Dimension(90, 90));
        Card4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card4MouseClicked(evt);
            }
        });

        Card8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card8.setPreferredSize(new java.awt.Dimension(90, 90));
        Card8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card8MouseClicked(evt);
            }
        });

        Card5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card5.setPreferredSize(new java.awt.Dimension(90, 90));
        Card5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card5MouseClicked(evt);
            }
        });

        Card17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card17.setPreferredSize(new java.awt.Dimension(90, 90));
        Card17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card17MouseClicked(evt);
            }
        });

        Card7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card7.setPreferredSize(new java.awt.Dimension(90, 90));
        Card7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card7MouseClicked(evt);
            }
        });

        Card12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card12.setPreferredSize(new java.awt.Dimension(90, 90));
        Card12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card12MouseClicked(evt);
            }
        });

        Card9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card9.setPreferredSize(new java.awt.Dimension(90, 90));
        Card9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card9MouseClicked(evt);
            }
        });

        Card10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card10.setPreferredSize(new java.awt.Dimension(90, 90));
        Card10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card10MouseClicked(evt);
            }
        });

        Card11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card11.setPreferredSize(new java.awt.Dimension(90, 90));
        Card11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card11MouseClicked(evt);
            }
        });

        Card16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card16.setPreferredSize(new java.awt.Dimension(90, 90));
        Card16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card16MouseClicked(evt);
            }
        });

        Card13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card13.setPreferredSize(new java.awt.Dimension(90, 90));
        Card13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card13MouseClicked(evt);
            }
        });

        Card14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card14.setPreferredSize(new java.awt.Dimension(90, 90));
        Card14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card14MouseClicked(evt);
            }
        });

        Card15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card15.setPreferredSize(new java.awt.Dimension(90, 90));
        Card15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card15MouseClicked(evt);
            }
        });

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        Exitbutton.setText("Exit");
        Exitbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitbuttonActionPerformed(evt);
            }
        });

        Card18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card18.setPreferredSize(new java.awt.Dimension(90, 90));
        Card18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card18MouseClicked(evt);
            }
        });

        Card6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cover1.png"))); // NOI18N
        Card6.setPreferredSize(new java.awt.Dimension(90, 90));
        Card6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Card6MouseClicked(evt);
            }
        });
        Card6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card6ActionPerformed(evt);
            }
        });

        congratsTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                congratsTextField1ActionPerformed(evt);
            }
        });

        resetButton1.setText("Reset");
        resetButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dubai Light", 0, 14)); // NOI18N
        jLabel2.setText("Warning! Clicking more than 2 cards is CHEATING! All your matches will disappear if you choose more");

        jLabel3.setFont(new java.awt.Font("Dubai Light", 0, 14)); // NOI18N
        jLabel3.setText("than 2 cards!");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Exitbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Card13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(congratsTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(resetButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(Exitbutton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(congratsTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Card5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Card1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Card6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Card7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Card13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Card16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Card17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Card18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
   
    /** Set change array */
        for (int z=0; z<=17; z++) {
           change[z] =1;
       }
        
        /** Assign cards at random */
        String temp; 
        for (int x=0; x<=8;x++) {
            for (int y=1; y<=2; y++) {
                temp = Integer.toString(x);
                set.add(temp);
            }
        }
        
        for (int x=0; x<=17; x++) {
            double index = Math.floor(Math.random()*(18-x)); /**Creates
             * a random number and converts to integer status */ 
         
            int index1 = (int) index; 
            cards.add(set.get(index1));
            set.remove(set.get(index1));
        }    
        
    }//GEN-LAST:event_playButtonActionPerformed

    private void congratsTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_congratsTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_congratsTextField1ActionPerformed

    private void ExitbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitbuttonActionPerformed
       System.exit(0); 
        // Stops running the program
    }//GEN-LAST:event_ExitbuttonActionPerformed
  public void Changecard() { // method to check for matches and change icons to "done" image
  
        count = 0;   
    if (c1 == c2) { // if both cards match
        for (int y=1; y<=2; y++) {
            
           /**Both cards selected will change to the "done" icon */
            if (change[0] == 0) {
                 Card1.setIcon (done);
                 change[0] = 2;
            } else if (change[1] == 0) {
                 Card2.setIcon(done);
                 change[1] = 2;
            } else if (change[2] == 0) {
                 Card3.setIcon(done);
                 change[2] = 2;
            } else if (change[3] == 0) {
                 Card4.setIcon(done);
                 change[3] = 2;
            } else if (change[4] == 0) {
                 Card5.setIcon(done);
                 change[4] = 2;
            } else if (change[5] == 0) {
                 Card6.setIcon(done);
                 change[5] = 2;
            } else if (change[6] == 0) {
                 Card7.setIcon(done);
                 change[6] = 2;
            } else if (change[7] == 0) {
                 Card8.setIcon(done);
                 change[7] = 2;
            } else if (change[8] == 0) {
                 Card9.setIcon(done);
                 change[8] = 2;
            } else if (change[9] == 0) {
                 Card10.setIcon(done);
                 change[9] = 2;
            } else if (change[10] == 0) {
                 Card11.setIcon(done);
                 change[10] = 2;
            } else if (change[11] == 0) {
                 Card12.setIcon(done);
                 change[11] = 2;
            } else if (change[12] == 0) {
                 Card13.setIcon(done);
                 change[12] = 2;
            } else if (change[13] == 0) {
                 Card14.setIcon(done);
                 change[13] = 2;
            } else if (change[14] == 0) {
                 Card15.setIcon(done);
                 change[14] = 2;
            } else if (change[15] == 0) {
                 Card16.setIcon(done);
                 change[15] = 2;
            } else if (change[16] == 0) {
                 Card17.setIcon(done);
                 change[16] = 2;
            } else if (change[17] == 0) {
                 Card18.setIcon(done);
                 change[17] = 2;
            } 
        } 
    }

 }

    Timer t = new Timer(4000, new ActionListener() { // timer set for 4 seconds. Card clicked changes back to cover image
            @Override
            public void actionPerformed(ActionEvent ae) {
            count = 0;
              if (cardsLeft <= 18) {
                   if (c1 != c2) { // if match between two cards has not been made
                 for (int y = 1;y<=2; y++) {
                 
                /** Have both cards selected change back to cover image */
                if (change[0] == 0) {
                     Card1.setIcon (back);
                     change[0] = 1;
                } else if (change [1] == 0) {
                     Card2.setIcon (back);
                     change [1] = 1;
                } else if (change [2] == 0) {
                     Card3.setIcon (back);
                     change [2] = 1;
                } else if (change [3] == 0) {
                     Card4.setIcon (back);
                     change [3] = 1;
                } else if (change [4] == 0) {
                     Card5.setIcon (back);
                     change [4] = 1;
                } else if (change [5] == 0) {
                     Card6.setIcon (back);
                     change [5] = 1;
                } else if (change [6] == 0) {
                     Card7.setIcon (back);
                     change [6] = 1;
                } else if (change [7] == 0) {
                     Card8.setIcon (back);
                     change [7] = 1;
                } else if (change [8] == 0) {
                     Card9.setIcon (back);
                     change [8] = 1;
                } else if (change [9] == 0) {
                     Card10.setIcon (back);
                     change [9] = 1;
                } else if (change [10] == 0) {
                     Card11.setIcon (back);
                     change [10] = 1;
                } else if (change [11] == 0) {
                     Card12.setIcon (back);
                     change [11] = 1;
                } else if (change [12] == 0) {
                     Card13.setIcon (back);
                     change [12] = 1;
                } else if (change [13] == 0) {
                     Card14.setIcon (back);
                     change [13] = 1;
                } else if (change [14] == 0) {
                     Card15.setIcon (back);
                     change [14] = 1;
                } else if (change [15] == 0) {
                     Card16.setIcon (back);
                     change [15] = 1;
                } else if (change [16] == 0) {
                     Card17.setIcon (back);
                     change [16] = 1;
                } else if (change [17] == 0) {
                     Card18.setIcon (back);
                     change [17] = 1;
                }
             }

        } 
                         
       if (c1 == c2) { // if both cards match
          Changecard(); // call the method Changecard
           congratsTextField1.setText("Congratulations!"); // display message in textfield
           s.start(); // have message show for 3.5 seconds        
        }    
            t.start(); // this will be used to call everything after the first timer to check for matches
       }
     }
  });
  
        Timer s = new Timer(3500, new ActionListener() { //timer for messages displayed in textfield
              @Override
              public void actionPerformed(ActionEvent ae) {
                congratsTextField1.setText(""); 
                s.start(); // this will be used to call this timer
              }
        });
  
    public void restrictCards() { // method for if user clicks more than 2 cards
       if (count > 2) {
         count = 0;    
         
         /** Has all icons turn back to cover image */
          Card1.setIcon(back); 
          Card2.setIcon(back);
          Card3.setIcon(back);
          Card4.setIcon(back);
          Card5.setIcon(back);
          Card6.setIcon(back);
          Card7.setIcon(back);
          Card8.setIcon(back);
          Card9.setIcon(back);
          Card10.setIcon(back);
          Card11.setIcon(back);
          Card12.setIcon(back);
          Card13.setIcon(back);
          Card14.setIcon(back);
          Card15.setIcon(back);
          Card16.setIcon(back);
          Card17.setIcon(back);
          Card18.setIcon(back);
      
           congratsTextField1.setText("You cannot pick more than 2 cards");
           s.start(); //makes the message disappear after 3.5 seconds
       }
     }
      
  
    private void Card1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card1MouseClicked
    try { // try...catch used to prevent the user from not clicking the Play Button
        
        /** Identifies the image placed in the box */
      String temp = cards.get(0); //give temp to cards
    
    /** if Structure checks the card and assigns correct image */  
      if (temp.equals("0")) { // temp for the first pair of cards
          Card1.setIcon(a); //changes button icon to correct picture
      } else if (temp.equals("1")) { // temp for the rest pairs of cards
          Card1.setIcon(b);
      } else if (temp.equals("2")) { // temp for the rest pairs of cards
          Card1.setIcon(c);
      } else if (temp.equals("3")) { // temp for the rest pairs of cards
          Card1.setIcon(d);
      } else if (temp.equals("4")) { // temp for the rest pairs of cards
          Card1.setIcon(e);
      } else if (temp.equals("5")) { // temp for the rest pairs of cards
          Card1.setIcon(f);
      } else if (temp.equals("6")) { // temp for the rest pairs of cards
          Card1.setIcon(g);
      } else if (temp.equals("7")) { // temp for the rest pairs of cards
          Card1.setIcon(h);
      } else if (temp.equals("8")) { // temp for the rest pairs of cards
          Card1.setIcon(i);
      }  
    
     /** sets the card chosen to one or two to check for match and sets
      * the change array to show the card icon has been changed
      */
     count++; 
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[0] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[0] = 0;
        }  
        
         t.start(); // calls the timer function to check for matches and have cards change back after 4 seconds
         restrictCards(); // prevents the user from choosing more than two cards. Calls restrictCards function
         
    } catch (Exception e) { //if user clicks on cards without clicking Play button first, this code runs
        resetCards(); // resets all cards
        congratsTextField1.setText("Click Play to start");
        s.start(); // displays the message for 3.5 seconds
    }    
        
    }//GEN-LAST:event_Card1MouseClicked

    private void Card2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card2MouseClicked
 try {
      String temp = cards.get(1); 
      
      if (temp.equals("0")) {
          Card2.setIcon(a);
      } else if (temp.equals("1")) {
          Card2.setIcon(b);
      } else if (temp.equals("2")) {
          Card2.setIcon(c);
      } else if (temp.equals("3")) {
          Card2.setIcon(d);
      } else if (temp.equals("4")) {
          Card2.setIcon(e);
      } else if (temp.equals("5")) {
          Card2.setIcon(f);
      } else if (temp.equals("6")) {
          Card2.setIcon(g);
      } else if (temp.equals("7")) {
          Card2.setIcon(h);
      } else if (temp.equals("8")) {
          Card2.setIcon(i);
      } 
      
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[1] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[1] = 0;
        }
 
        t.start();
         restrictCards(); 
         
   } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
        s.start();  
    }   
    }//GEN-LAST:event_Card2MouseClicked

    private void Card3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card3MouseClicked
    try {
        String temp = cards.get(2); 
        
        if (temp.equals("0")) {
          Card3.setIcon(a);
      } else if (temp.equals("1")) {
          Card3.setIcon(b);
      } else if (temp.equals("2")) {
          Card3.setIcon(c);
      } else if (temp.equals("3")) {
          Card3.setIcon(d);
      } else if (temp.equals("4")) {
          Card3.setIcon(e);
      } else if (temp.equals("5")) {
          Card3.setIcon(f);
      } else if (temp.equals("6")) {
          Card3.setIcon(g);
      } else if (temp.equals("7")) {
          Card3.setIcon(h);
      } else if (temp.equals("8")) {
          Card3.setIcon(i);
      } 
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[2] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[2] = 0;
        }
        
            t.start();
            restrictCards(); 
    
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
        s.start();
      }   
     
    }//GEN-LAST:event_Card3MouseClicked

    private void Card4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card4MouseClicked
    try {
        String temp = cards.get(3); 
        
        if (temp.equals("0")) {
          Card4.setIcon(a);
      } else if (temp.equals("1")) {
          Card4.setIcon(b);
      } else if (temp.equals("2")) {
          Card4.setIcon(c);
      } else if (temp.equals("3")) {
          Card4.setIcon(d);
      } else if (temp.equals("4")) {
          Card4.setIcon(e);
      } else if (temp.equals("5")) {
          Card4.setIcon(f);
      } else if (temp.equals("6")) {
          Card4.setIcon(g);
      } else if (temp.equals("7")) {
          Card4.setIcon(h);
      } else if (temp.equals("8")) {
          Card4.setIcon(i);
      } 
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[3] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[3] = 0;
        }
    
            t.start();
            restrictCards(); 
        
     } catch (Exception e) { 
         resetCards();
        congratsTextField1.setText("Click Play to start");
            s.start();
        }   
    }//GEN-LAST:event_Card4MouseClicked

    private void Card5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card5MouseClicked
     try {
        String temp = cards.get(4); 
        
        if (temp.equals("0")) {
          Card5.setIcon(a);
      } else if (temp.equals("1")) {
          Card5.setIcon(b);
      } else if (temp.equals("2")) {
          Card5.setIcon(c);
      } else if (temp.equals("3")) {
          Card5.setIcon(d);
      } else if (temp.equals("4")) {
          Card5.setIcon(e);
      } else if (temp.equals("5")) {
          Card5.setIcon(f);
      } else if (temp.equals("6")) {
          Card5.setIcon(g);
      } else if (temp.equals("7")) {
          Card5.setIcon(h);
      } else if (temp.equals("8")) {
          Card5.setIcon(i);
      } 
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[4] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[4] = 0;
        }
        
            t.start();
            restrictCards(); 
      
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
            s.start();
      } 
     
    }//GEN-LAST:event_Card5MouseClicked

    private void Card6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card6MouseClicked
    try {
        String temp = cards.get(5); 
        
        if (temp.equals("0")) {
          Card6.setIcon(a);
      } else if (temp.equals("1")) {
          Card6.setIcon(b);
      } else if (temp.equals("2")) {
          Card6.setIcon(c);
      } else if (temp.equals("3")) {
          Card6.setIcon(d);
      } else if (temp.equals("4")) {
          Card6.setIcon(e);
      } else if (temp.equals("5")) {
          Card6.setIcon(f);
      } else if (temp.equals("6")) {
          Card6.setIcon(g);
      } else if (temp.equals("7")) {
          Card6.setIcon(h);
      } else if (temp.equals("8")) {
          Card6.setIcon(i);
      } 
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[5] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[5] = 0;
        }
  
        t.start();
        restrictCards(); 
        
    } catch (Exception e) {
        resetCards();
        congratsTextField1.setText("Click Play to start");
         s.start();
      }   
    
    }//GEN-LAST:event_Card6MouseClicked

    private void Card7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card7MouseClicked
    try {
        String temp = cards.get(6); 
        
        if (temp.equals("0")) {
          Card7.setIcon(a);
      } else if (temp.equals("1")) {
          Card7.setIcon(b);
      } else if (temp.equals("2")) {
          Card7.setIcon(c);
      } else if (temp.equals("3")) {
          Card7.setIcon(d);
      } else if (temp.equals("4")) {
          Card7.setIcon(e);
      } else if (temp.equals("5")) {
          Card7.setIcon(f);
      } else if (temp.equals("6")) {
          Card7.setIcon(g);
      } else if (temp.equals("7")) {
          Card7.setIcon(h);
      } else if (temp.equals("8")) {
          Card7.setIcon(i);
      }
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[6] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[6] = 0;
        }

            t.start();
            restrictCards(); 
     
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");     
         s.start();
     }
    
    }//GEN-LAST:event_Card7MouseClicked

    private void Card8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card8MouseClicked
    try {
        String temp = cards.get(7); 
        
        if (temp.equals("0")) {
          Card8.setIcon(a);
      } else if (temp.equals("1")) {
          Card8.setIcon(b);
      } else if (temp.equals("2")) {
          Card8.setIcon(c);
      } else if (temp.equals("3")) {
          Card8.setIcon(d);
      } else if (temp.equals("4")) {
          Card8.setIcon(e);
      } else if (temp.equals("5")) {
          Card8.setIcon(f);
      } else if (temp.equals("6")) {
          Card8.setIcon(g);
      } else if (temp.equals("7")) {
          Card8.setIcon(h);
      } else if (temp.equals("8")) {
          Card8.setIcon(i);
      } 
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[7] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[7] = 0;
        }
        
        t.start();
        restrictCards(); 
        
     } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
             s.start();
      }
    
    }//GEN-LAST:event_Card8MouseClicked

    private void Card9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card9MouseClicked
    try {
        String temp = cards.get(8); 
        
        if (temp.equals("0")) {
          Card9.setIcon(a);
      } else if (temp.equals("1")) {
          Card9.setIcon(b);
      } else if (temp.equals("2")) {
          Card9.setIcon(c);
      } else if (temp.equals("3")) {
          Card9.setIcon(d);
      } else if (temp.equals("4")) {
          Card9.setIcon(e);
      }  else if (temp.equals("5")) {
          Card9.setIcon(f);
      } else if (temp.equals("6")) {
          Card9.setIcon(g);
      } else if (temp.equals("7")) {
          Card9.setIcon(h);
      } else if (temp.equals("8")) {
          Card9.setIcon(i);
      } 
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[8] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[8] = 0;
        }
        
            t.start();
            restrictCards(); 
            
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
             s.start();
      }
    
    }//GEN-LAST:event_Card9MouseClicked

    private void Card10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card10MouseClicked
    try {
        String temp = cards.get(9); 
        
        if (temp.equals("0")) {
          Card10.setIcon(a);
      } else if (temp.equals("1")) {
          Card10.setIcon(b);
      } else if (temp.equals("2")) {
          Card10.setIcon(c);
      } else if (temp.equals("3")) {
          Card10.setIcon(d);
      } else if (temp.equals("4")) {
          Card10.setIcon(e);
      }  else if (temp.equals("5")) {
          Card10.setIcon(f);
      } else if (temp.equals("6")) {
          Card10.setIcon(g);
      } else if (temp.equals("7")) {
          Card10.setIcon(h);
      } else if (temp.equals("8")) {
          Card10.setIcon(i);
      } 
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[9] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[9] = 0;
        }
        
            t.start();
            restrictCards(); 
            
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
             s.start();
      }   
    
    }//GEN-LAST:event_Card10MouseClicked

    private void Card11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card11MouseClicked
    try {
        String temp = cards.get(10); 
        
        if (temp.equals("0")) {
          Card11.setIcon(a);
      } else if (temp.equals("1")) {
          Card11.setIcon(b);
      } else if (temp.equals("2")) {
          Card11.setIcon(c);
      }  else if (temp.equals("3")) {
          Card11.setIcon(d);
      } else if (temp.equals("4")) {
          Card11.setIcon(e);
      }  else if (temp.equals("5")) {
          Card11.setIcon(f);
      } else if (temp.equals("6")) {
          Card11.setIcon(g);
      } else if (temp.equals("7")) {
          Card11.setIcon(h);
      } else if (temp.equals("8")) {
          Card11.setIcon(i);
      } 
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[10] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[10] = 0;
        }
        
            t.start();
            restrictCards(); 
        
     } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
          s.start();
      }      
        
    }//GEN-LAST:event_Card11MouseClicked

    private void Card12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card12MouseClicked
    try {
        String temp = cards.get(11); 
        
        if (temp.equals("0")) {
          Card12.setIcon(a);
      } else if (temp.equals("1")) {
          Card12.setIcon(b);
      } else if (temp.equals("2")) {
          Card12.setIcon(c);
      }  else if (temp.equals("3")) {
          Card12.setIcon(d);
      } else if (temp.equals("4")) {
          Card12.setIcon(e);
      }  else if (temp.equals("5")) {
          Card12.setIcon(f);
      } else if (temp.equals("6")) {
          Card12.setIcon(g);
      } else if (temp.equals("7")) {
          Card12.setIcon(h);
      } else if (temp.equals("8")) {
          Card12.setIcon(i);
      }
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[11] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[11] = 0;
        }
        
            t.start();
            restrictCards(); 
        
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
             s.start();
      } 
    
    }//GEN-LAST:event_Card12MouseClicked

    private void Card13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card13MouseClicked
    try {
        String temp = cards.get(12); 
        
        if (temp.equals("0")) {
          Card13.setIcon(a);
      } else if (temp.equals("1")) {
          Card13.setIcon(b);
      } else if (temp.equals("2")) {
          Card13.setIcon(c);
      }  else if (temp.equals("3")) {
          Card13.setIcon(d);
      } else if (temp.equals("4")) {
          Card13.setIcon(e);
      }  else if (temp.equals("5")) {
          Card13.setIcon(f);
      } else if (temp.equals("6")) {
          Card13.setIcon(g);
      } else if (temp.equals("7")) {
          Card13.setIcon(h);
      } else if (temp.equals("8")) {
          Card13.setIcon(i);
      }
       
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[12] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[12] = 0;
        }
        
            t.start();
            restrictCards(); 
        
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
             s.start();
      }
    
    }//GEN-LAST:event_Card13MouseClicked

    private void Card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Card6ActionPerformed

    private void Card14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card14MouseClicked
    try {
        String temp = cards.get(13); 
        
        if (temp.equals("0")) {
          Card14.setIcon(a);
      } else if (temp.equals("1")) {
          Card14.setIcon(b);
      } else if (temp.equals("2")) {
          Card14.setIcon(c);
      }  else if (temp.equals("3")) {
          Card14.setIcon(d);
      } else if (temp.equals("4")) {
          Card14.setIcon(e);
      }  else if (temp.equals("5")) {
          Card14.setIcon(f);
      } else if (temp.equals("6")) {
          Card14.setIcon(g);
      } else if (temp.equals("7")) {
          Card14.setIcon(h);
      } else if (temp.equals("8")) {
          Card14.setIcon(i);
      }
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[13] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[13] = 0;
        }
        
            t.start();
            restrictCards(); 
            
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
             s.start();
     }   
     
    }//GEN-LAST:event_Card14MouseClicked

    private void Card15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card15MouseClicked
     try {
        String temp = cards.get(14); 
        
        if (temp.equals("0")) {
          Card15.setIcon(a);
      } else if (temp.equals("1")) {
          Card15.setIcon(b);
      } else if (temp.equals("2")) {
          Card15.setIcon(c);
      }  else if (temp.equals("3")) {
          Card15.setIcon(d);
      } else if (temp.equals("4")) {
          Card15.setIcon(e);
      }  else if (temp.equals("5")) {
          Card15.setIcon(f);
      } else if (temp.equals("6")) {
          Card15.setIcon(g);
      } else if (temp.equals("7")) {
          Card15.setIcon(h);
      } else if (temp.equals("8")) {
          Card15.setIcon(i);
      }
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[14] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[14] = 0;
        }
        
            t.start();
            restrictCards(); 
            
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
             s.start();
      }   
     
    }//GEN-LAST:event_Card15MouseClicked

    private void Card16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card16MouseClicked
     try {    
        String temp = cards.get(15); 
        
        if (temp.equals("0")) {
          Card16.setIcon(a);
      } else if (temp.equals("1")) {
          Card16.setIcon(b);
      } else if (temp.equals("2")) {
          Card16.setIcon(c);
      }  else if (temp.equals("3")) {
          Card16.setIcon(d);
      } else if (temp.equals("4")) {
          Card16.setIcon(e);
      }  else if (temp.equals("5")) {
          Card16.setIcon(f);
      } else if (temp.equals("6")) {
          Card16.setIcon(g);
      } else if (temp.equals("7")) {
          Card16.setIcon(h);
      } else if (temp.equals("8")) {
          Card16.setIcon(i);
      }
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[15] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[15] = 0;
        }
        
            t.start();
            restrictCards(); 
            
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
        s.start();   
     }
     
    }//GEN-LAST:event_Card16MouseClicked

    private void Card17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card17MouseClicked
    try { 
        String temp = cards.get(16); 
        
        if (temp.equals("0")) {
          Card17.setIcon(a);
      } else if (temp.equals("1")) {
          Card17.setIcon(b);
      } else if (temp.equals("2")) {
          Card17.setIcon(c);
      }  else if (temp.equals("3")) {
          Card17.setIcon(d);
      } else if (temp.equals("4")) {
          Card17.setIcon(e);
      }  else if (temp.equals("5")) {
          Card17.setIcon(f);
      } else if (temp.equals("6")) {
          Card17.setIcon(g);
      } else if (temp.equals("7")) {
          Card17.setIcon(h);
      } else if (temp.equals("8")) {
          Card17.setIcon(i);
      }
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[16] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[16] = 0;
        }
        
            t.start();
            restrictCards(); 
        
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
             s.start();
      }   
    
    }//GEN-LAST:event_Card17MouseClicked

    private void Card18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Card18MouseClicked
    try { 
        String temp = cards.get(17); 
        
        if (temp.equals("0")) {
          Card18.setIcon(a);
      } else if (temp.equals("1")) {
          Card18.setIcon(b);
      } else if (temp.equals("2")) {
          Card18.setIcon(c);
      }  else if (temp.equals("3")) {
          Card18.setIcon(d);
      } else if (temp.equals("4")) {
          Card18.setIcon(e);
      }  else if (temp.equals("5")) {
          Card18.setIcon(f);
      } else if (temp.equals("6")) {
          Card18.setIcon(g);
      } else if (temp.equals("7")) {
          Card18.setIcon(h);
      } else if (temp.equals("8")) {
          Card18.setIcon(i);
      }
        
      count ++;
        if (count == 1) {
             c1 = Integer.parseInt(temp);
             change[17] = 0;
        } else if (count == 2) {
             c2 = Integer.parseInt(temp);
             change[17] = 0;
        }
            t.start();
            restrictCards(); 
            
    } catch (Exception e) { 
        resetCards();
        congratsTextField1.setText("Click Play to start");
            s.start();
      }   
    
    }//GEN-LAST:event_Card18MouseClicked
 public void resetCards() { // method to reset all cards
     count = 0; // set counter to 0
     
     /** Makes all cards change back to cover image */
          Card1.setIcon(back); 
          Card2.setIcon(back);
          Card3.setIcon(back);
          Card4.setIcon(back);
          Card5.setIcon(back);
          Card6.setIcon(back);
          Card7.setIcon(back);
          Card8.setIcon(back);
          Card9.setIcon(back);
          Card10.setIcon(back);
          Card11.setIcon(back);
          Card12.setIcon(back);
          Card13.setIcon(back);
          Card14.setIcon(back);
          Card15.setIcon(back);
          Card16.setIcon(back);
          Card17.setIcon(back);
          Card18.setIcon(back);
             congratsTextField1.setText("Game has now been reset"); // display message in textfield
                 s.start(); // display message for 3.5 seconds
     
    }
       
    private void resetButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButton1ActionPerformed
   
       resetCards(); // calls the resetCards function
    }//GEN-LAST:event_resetButton1ActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(matchinGgame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(matchinGgame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(matchinGgame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(matchinGgame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new matchinGgame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Card1;
    private javax.swing.JButton Card10;
    private javax.swing.JButton Card11;
    private javax.swing.JButton Card12;
    private javax.swing.JButton Card13;
    private javax.swing.JButton Card14;
    private javax.swing.JButton Card15;
    private javax.swing.JButton Card16;
    private javax.swing.JButton Card17;
    private javax.swing.JButton Card18;
    private javax.swing.JButton Card2;
    private javax.swing.JButton Card3;
    private javax.swing.JButton Card4;
    private javax.swing.JButton Card5;
    private javax.swing.JButton Card6;
    private javax.swing.JButton Card7;
    private javax.swing.JButton Card8;
    private javax.swing.JButton Card9;
    private javax.swing.JButton Exitbutton;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JTextField congratsTextField1;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton playButton;
    private javax.swing.JButton resetButton1;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
